{"version":3,"file":"static/js/181.84e61dbd.chunk.js","mappings":"sMAuVA,UAlVyB,WACvB,OAAsBA,EAAAA,EAAAA,UAAS,IAA/B,eAAOC,EAAP,KAAYC,EAAZ,KACA,GAAkCF,EAAAA,EAAAA,UAAS,IAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA8BJ,EAAAA,EAAAA,UAAS,IAAvC,eAAOK,EAAP,KAAgBC,EAAhB,KACA,GAA0BN,EAAAA,EAAAA,UAAS,KAAnC,eAAOO,EAAP,KAAcC,EAAd,KACA,GAA4BR,EAAAA,EAAAA,UAAS,KAArC,eAAOS,EAAP,KAAeC,EAAf,KAEMC,EAAM,+BACNC,EAAS,+BACTC,EAAMC,EAAAA,GAAAA,MATiB,wCA6B7B,WAAwBC,EAAKC,GAA7B,YAAAC,EAAA,wEACEC,QAAQC,IAAR,4CAAwBH,IAD1B,SAEqBI,MAAML,EAAK,CAACM,OAAQ,QAFzC,cAEQC,EAFR,gBAGqBA,EAAKC,OAH1B,cAGQA,EAHR,OAIMC,EAJN,UAIoBR,EAJpB,aAKqBS,IALrB,UAK+CF,EAL/C,oBAKQG,EALR,KAKyBC,gBALzB,iBAMQV,EAAIW,SAASC,cAAc,MAC/BC,KAAOJ,EACTT,EAAEc,SAAWP,EACbI,SAASI,KAAKC,YAAYhB,GAC1BA,EAAEiB,QACFC,OAAOV,IAAIW,gBAAgBrB,GAX7B,6CA7B6B,+BA2CdsB,IA3Cc,uEA2C7B,6FACMC,EAAQ,EACNC,EAAQ,GAFhB,SAGe,IAAIC,SAAQ,SAACC,GACxBC,EAAAA,GAAAA,WACc,SACXC,MAAM,YAAa,KAAMC,gCACzBD,MAAM,OAAQ,KAAMxC,GACpBwC,MAAM,OAAQ,KAAMtC,GACpBwC,QAAQ,OAAQ,QAChBC,MACAC,MAAK,SAACC,GACLA,EAASC,KAAKC,SAAQ,SAACvC,GACrB2B,IACAC,EAAMY,KAAK,CACTC,IAAKd,EACLe,GAAI1C,EAAI0C,GACRrC,KAAML,EAAI2C,OAAOtC,KACjBD,IAAKJ,EAAI2C,OAAOC,cAChBC,aAAc7C,EAAI2C,OAAOE,cAE5B,IACDf,EAAQF,EACT,IACAkB,OAAM,SAACC,GACNxC,QAAQC,IAAI,4BAA6BuC,EAC1C,GACF,IA3BL,mFA3C6B,wBA0E7B,IAAMC,EAAsB,mCAAG,2FAC7BzC,QAAQC,IAAI,yDADiB,SAGXkB,IAHW,OAGzBE,EAHyB,OAI7BrB,QAAQC,IAAI,oCAAWoB,GAEvBA,EAAMW,QAAN,mCAAc,WAAOU,GAAP,iEACZ1C,QAAQC,IAAI,uDAAgByC,GAC5BC,EAAYD,EAAKP,GAAIO,EAAK7C,IAAK6C,EAAKJ,cAFxB,2CAAd,uDAN6B,2CAAH,qDA1EC,SAsFdK,EAtFc,8EAsF7B,WAA2BC,EAAO/C,EAAKyC,GAAvC,6FACsB1C,EAAAA,GAAAA,WAA0BC,GADhD,UACMgD,EADN,OAEMC,EAAW,GACM,KAAjBR,QAAwCS,IAAjBT,EAH7B,gCAIqB1C,EAAAA,GAAAA,WAA0B0C,GAJ/C,OAIIQ,EAJJ,qBAOMD,EAAQG,KAAKC,QAAQ,KAAO,IAC1BlE,EAAM8D,EAAQG,KAAKE,MAAM,KAC7BlE,EAAOD,EAAIA,EAAIoE,OAAS,KAT5B,UAYqBjD,MAAML,EAAK,CAACM,OAAQ,QAZzC,eAYQC,EAZR,iBAaqBA,EAAKC,OAb1B,QAcE+C,EAdF,OAcuBP,EAAQG,KAAMF,EAASE,KAAMJ,GAdpD,6CAtF6B,+BAuGdQ,EAvGc,gFAuG7B,WAA8B/C,EAAMgD,EAAgBC,EAAeV,GAAnE,oFACE5C,QAAQC,IAAR,4BAAiCI,EAAKkD,KAAO,KAAO,KAApD,QACAvD,QAAQC,IAAI,2CAAcoD,GAEpBG,EAAU,CACdC,UAAW,EACXC,iBAAkB,IAClBC,cAAc,EACdC,eAAgB,IARpB,mBAWiCC,EAAAA,EAAAA,GAAiBxD,EAAMmD,GAXxD,cAWUJ,EAXV,OAYIpD,QAAQC,IAAR,8BAAmCmD,EAAeG,KAAO,KAAO,KAAhE,QAZJ,UAc8BO,EAAiBV,GAd/C,eAcQW,EAdR,OAeI/D,QAAQC,IAAI,oCAAY8D,GAf5B,UAiBoBzC,QAAQ0C,IAAI,CAC1BrE,EAAIsE,MAAJ,UAAaxE,EAAb,YAAoB4D,IAAkBa,SACrCrC,MAAK,WACJ7B,QAAQC,IAAIoD,EAAiB,qCAC9B,IACAd,OAAM,SAACC,GACNxC,QAAQC,IAAI,sCAAcuC,GAC1B7C,EAAIsE,MAAJ,UAAavE,EAAb,YAAuB2D,IAAkBa,SAASrC,MAAK,WACrD7B,QAAQC,IAAIoD,EAAiB,qCAC9B,IAAEd,OAAM,SAACC,GACRxC,QAAQC,IAAI,sCAAcuC,EAC3B,GACF,IAED7C,EAAIsE,MAAJ,qBAAwBX,IAAiBY,SACxCrC,MAAK,WACJ7B,QAAQC,IAAIqD,EAAgB,gDAC7B,IACAf,OAAM,SAACC,GACNxC,QAAQC,IAAI,iDAAeuC,EAC5B,IAED7C,EAAIsE,MAAJ,UAAaxE,EAAb,aAAoB0E,EAAAA,EAAAA,OAApB,OAA+BpF,EAAM,IAAIA,EAAM,SAAUqF,IAAIhB,GAC5DvB,MAAK,SAACC,GACL,OAAOA,EAASnC,IAAI0E,gBACrB,IAAE9B,OAAM,SAACC,GACRxC,QAAQC,IAAI,0CAAauC,EAC1B,IAED7C,EAAIsE,MAAJ,sBAAwBE,EAAAA,EAAAA,MAAxB,UAAyCC,IAAIL,GAC5ClC,MAAK,SAACC,GACL,OAAOA,EAASnC,IAAI0E,gBACrB,IAAE9B,OAAM,SAACC,GACRxC,QAAQC,IAAI,6DAAiBuC,EAC9B,MAnDP,QAiBQ8B,EAjBR,OAsDItE,QAAQC,IAAIqE,GAEZC,EAAoB3B,EAAO0B,EAAI,GAAIA,EAAI,IAxD3C,kDA2DItE,QAAQC,IAAR,MA3DJ,2DAvG6B,+BAsKd6D,EAtKc,0EAsK7B,WAAgCzD,GAAhC,8EACQmE,EAAS,IAAIC,WADrB,SAEe,IAAInD,SAAQ,SAACC,GACxBiD,EAAOE,UAAY,SAACC,GAClB,IACmBC,EACfD,EADFE,cAAiBD,OAEbE,EAAQ,IAAIC,MAClBD,EAAME,IAAMJ,EACZE,EAAMG,OAAS,WACb,IAAMC,EAASxE,SAASC,cAAc,UACtCuE,EAAO7F,MAAQ,IACf6F,EAAO3F,OAAS,IAChB2F,EAAOC,WAAW,MAAMC,UAAUN,EAAO,EAAG,EAAG,IAAK,KACpDI,EAAOG,QAAO,SAAChF,GACbkB,EAAQlB,EACT,GAAE,aAAc,GAClB,CACF,EACDmE,EAAOc,cAAcjF,EACtB,IApBH,oFAtK6B,+BA8LdkE,EA9Lc,8EA8L7B,WAAmC3B,EAAO/C,EAAKyC,GAA/C,iEACEd,EAAAA,GAAAA,IAAA,gBAAuBoB,IAAS2C,OAAO,CACrClD,cAAexC,EACfyC,aAAcA,IAEhBtC,QAAQC,IAAI,kFAAiCJ,EAAKyC,GALpD,4CA9L6B,sBAuM7B,IAAMkD,EAAqB,mCAAG,2FAC5BxF,QAAQC,IAAI,yFADgB,SAEVkB,IAFU,OAExBE,EAFwB,OAG5BrB,QAAQC,IAAI,oCAAWoB,GAEvBA,EAAMW,QAAN,mCAAc,WAAOU,GAAP,iEACZ1C,QAAQC,IAAI,uDAAgByC,GACvBA,EAAKJ,cACRmD,EAAgB/C,EAAKP,GAAIO,EAAK7C,KAHpB,2CAAd,uDAL4B,2CAAH,qDAvME,SAoNd4F,EApNc,4EAoN7B,WAA+B7C,EAAO/C,GAAtC,yFACsBD,EAAAA,GAAAA,WAA0BC,GADhD,cACMgD,EADN,gBAEqB3C,MAAML,EAAK,CAACM,OAAQ,QAFzC,cAEQC,EAFR,gBAGqBA,EAAKC,OAH1B,OAIEqF,EAJF,OAIwB7C,EAAQG,KAAMJ,GAJtC,6CApN6B,+BA2Nd8C,EA3Nc,8EA2N7B,WAA+BrF,EAAMgD,EAAgBT,GAArD,gFACE5C,QAAQC,IAAI,2CAAcoD,GAD5B,kBAI8BS,EAAiBzD,GAJ/C,cAIQ0D,EAJR,OAKI/D,QAAQC,IAAI,oCAAY8D,GAL5B,SAOoB,IAAIzC,SAAQ,SAACC,GAC3B5B,EAAIsE,MAAJ,sBAAwBE,EAAAA,EAAAA,MAAxB,UAAyCC,IAAIL,GAC5ClC,MAAK,SAACC,GACLP,EAAQO,EAASnC,IAAI0E,iBACtB,IAAE9B,OAAM,SAACC,GACRxC,QAAQC,IAAI,6DAAiBuC,EAC9B,GACF,IAdL,OAOQ8B,EAPR,OAgBIqB,EAAmB/C,EAAO0B,GAhB9B,kDAmBItE,QAAQC,IAAR,MAnBJ,2DA3N6B,+BAkPd0F,EAlPc,4EAkP7B,WAAkC/C,EAAON,GAAzC,iEACEd,EAAAA,GAAAA,IAAA,gBAAuBoB,IAAS2C,OAAO,CACrCjD,aAAcA,IAEhBtC,QAAQC,IAAI,kFAAiCqC,GAJ/C,4CAlP6B,sBAuS7B,OACE,oBAASsD,UAAU,qBAAnB,UACE,iBAAKA,UAAU,YAAaC,MAAO,CAACC,MAAM,SAA1C,WACE,iBAAKD,MAAO,CAACE,QAAQ,OAAQC,WAAW,SAAUC,IAAI,IAAtD,WACE,iBAAKJ,MAAO,CAACK,OAAO,IAApB,iCACM,kBAAOC,KAAK,OAAOC,SArBT,SAACC,GACvBnH,EAAamH,EAAMC,OAAOC,MAC3B,EAmB2DV,MAAO,CAACW,QAAQ,GAAIN,OAAO,UAE/E,8BACA,kDACM,kBAAOC,KAAK,OAAOC,SArBX,SAACC,GACrBjH,EAAWiH,EAAMC,OAAOC,MACzB,EAmByDV,MAAO,CAACW,QAAQ,GAAIN,OAAO,aAG/E,iBAAKL,MAAO,CAACE,QAAQ,OAAQE,IAAI,GAAIQ,eAAe,SAAUT,WAAW,aAAcU,UAAU,UAAjG,WACE,iBAAKb,MAAO,CAACE,QAAQ,OAAQY,cAAc,SAAUV,IAAI,IAAzD,WACE,4BACE,eAAIJ,MAAO,CAACe,aAAa,GAAzB,6EACA,kBAAOT,KAAK,SAASP,UAAU,sBAAsBiB,QAASpE,EAAwB8D,MAAM,cAE9F,4BACE,eAAIV,MAAO,CAACe,aAAa,GAAzB,mFACA,kBAAOT,KAAK,SAASP,UAAU,sBAAsBiB,QAASrB,EAAuBe,MAAM,cAE7F,4BACE,eAAIV,MAAO,CAACe,aAAa,GAAzB,6EACA,kBAAOT,KAAK,SAASP,UAAU,sBAAsBiB,QAnTrC,WAC1B7G,QAAQC,IAAI,4DACZuB,EAAAA,GAAAA,WACc,SACXC,MAAM,YAAa,KAAMC,gCACzBD,MAAM,OAAQ,KAAMxC,GACpBwC,MAAM,OAAQ,KAAMtC,GACpBwC,QAAQ,OAAQ,QAChBC,MACAC,MAAK,SAACC,GACL9B,QAAQC,IAAI,oCAAY6B,EAASC,KAAKoB,QACtCrB,EAASC,KAAKC,SAAQ,SAACvC,IAvBA,sCAwBrBoB,CAASpB,EAAI2C,OAAOC,cAAe5C,EAAI2C,OAAOtC,KAC/C,GACF,GACJ,EAoS8FyG,MAAM,oBAG7F,iBAAKV,MAAO,CAACE,QAAQ,OAAQY,cAAc,SAAUX,WAAW,SAAUC,IAAI,IAA9E,WACE,sFACA,qCACQ,kBAAOE,KAAK,SAASC,SAtCnB,SAACC,GACnB/G,EAAS+G,EAAMC,OAAOC,MACvB,EAoC6DV,MAAO,CAACxG,MAAM,IAAKmH,QAAQ,GAAIM,aAAa,EAAGC,YAAY,MAD/G,WAES,kBAAOZ,KAAK,SAASC,SAnCnB,SAACC,GACpB7G,EAAU6G,EAAMC,OAAOC,MACxB,EAiC+DV,MAAO,CAACxG,MAAM,IAAKmH,QAAQ,GAAIM,aAAa,SAElG,kBAAOX,KAAK,OAAOhE,GAAG,eAAe0D,MAAO,CAACxG,MAAM,IAAKyG,MAAM,OAAQkB,gBAAgB,QAASR,QAAQ,GAAIM,aAAa,MACxH,kBAAOX,KAAK,SAASP,UAAU,sBAAsBiB,QA/ElC,WAC3B7G,QAAQC,IAAI,mFAKd,SAAqBgH,GACnB,IAAMzC,EAAS,IAAIC,WACnBD,EAAOc,cAAc2B,GACrBzC,EAAOS,OAAS,SAAUoB,GACxB,IAAMvB,EAAQ,IAAIC,MAClBD,EAAMzF,MAAQA,EACdyF,EAAMvF,OAASA,EACfuF,EAAMoC,MAAQ,YACdpC,EAAME,IAAMR,EAAOI,OAEnBE,EAAMG,OAAS,WACb,IAAMC,EAASxE,SAASC,cAAc,UACtCuE,EAAO7F,MAAQA,EACf6F,EAAO3F,OAASA,EAChB2F,EAAOC,WAAW,MAAMC,UAAUN,EAAO,EAAG,EAAGzF,EAAOE,GACtD,IAAM4H,EAAUjC,EAAOkC,UAAU,aAAc,IACzCC,EAAQ,IAAItC,MAClBsC,EAAMrC,IAAImC,EACVzG,SAAS4G,eAAe,aAAavG,YAAYsG,EAClD,CACF,CACF,CAxBCE,CADa7G,SAAS4G,eAAe,gBAAgBE,MAAM,GAE5D,EA2E6FjB,MAAM,YAC1F,gBAAKpE,GAAG,wBAMnB,C","sources":["routes/ImageCompressior.js"],"sourcesContent":["import { storageService, dbService } from \"fbase\";\nimport imageCompression from 'browser-image-compression';\nimport { useState } from \"react\";\nimport { uuidv4 } from \"@firebase/util\";\n\nconst ImageCompressior = () => {\n  const [ext, setExt] = useState(\"\");\n  const [startDate, setStartDate] = useState(\"\");\n  const [endDate, setEndDate] = useState(\"\");\n  const [width, setWidth] = useState(300);\n  const [height, setHeight] = useState(300);\n  \n  const doc = 'S9nPnnJhejVZ2HJsVVmYaTxTB732';\n  const oldDoc = 'Vf46gZOvLVagkCQbvZxSqXyjrDu1';\n  const ref = storageService.ref();\n\n  // 이미지 다운로드\n  const handleImageDownload = () => {\n    console.log('이미지 다운로드 시작');\n    dbService\n      .collection(\"items\")\n      .where(\"creatorId\", \"==\", process.env.REACT_APP_ADMIN)\n      .where(\"date\", \">=\", startDate)\n      .where(\"date\", \"<=\", endDate)\n      .orderBy(\"date\", \"desc\")\n      .get()\n      .then((snapshot) => {\n        console.log('이미지 갯수: ', snapshot.docs.length);\n        snapshot.docs.forEach((doc) => {\n          download(doc.data().attachmentUrl, doc.data().date);\n        });\n      });    \n  }\n\n  async function download(url, date) {\n    console.log(`이미지 호출 : ${date}`);\n    const init = await fetch(url, {method: \"get\"});\n    const blob = await init.blob();\n    let fileName = `${date}.jpg`;\n    const createdUrl = URL.createObjectURL(await blob);\n    const a = document.createElement(\"a\");\n    a.href = createdUrl;\n    a.download = fileName;\n    document.body.appendChild(a);\n    a.click();\n    window.URL.revokeObjectURL(url);\n  }\n\n  async function getItems() {\n    let count = 0;\n    const items = [];\n    return await new Promise((resolve) => {\n      dbService\n        .collection(\"items\")\n        .where(\"creatorId\", \"==\", process.env.REACT_APP_ADMIN)\n        .where(\"date\", \">=\", startDate)\n        .where(\"date\", \"<=\", endDate)\n        .orderBy(\"date\", \"desc\")\n        .get()\n        .then((snapshot) => {\n          snapshot.docs.forEach((doc) => {\n            count++;\n            items.push({\n              num: count, \n              id: doc.id, \n              date: doc.data().date, \n              url: doc.data().attachmentUrl, \n              thumbnailUrl: doc.data().thumbnailUrl\n            });\n          });\n          resolve(items);\n        })\n        .catch((error) => {\n          console.log(\"Error getting documents: \", error);\n        });\n      });\n  }\n\n  // 이미지 압축하기\n  const handleImageCompression = async () => {\n    console.log('========= 이미지 압축시작');\n\n    let items = await getItems();\n    console.log('전체 아이템: ',items)\n\n    items.forEach(async (item) => {\n      console.log('업데이트 호출 시작: ', item);\n      updateImage(item.id, item.url, item.thumbnailUrl);\n    });\n  }\n\n  async function updateImage(docId, url, thumbnailUrl) {\n    let mainRef = await storageService.refFromURL(url);\n    let thumbRef = \"\";\n    if (thumbnailUrl !== \"\" && thumbnailUrl !== undefined) {\n      thumbRef = await storageService.refFromURL(thumbnailUrl);\n    } \n\n    if (mainRef.name.indexOf('.') > 0) {\n      let ext = mainRef.name.split('.');\n      setExt(ext[ext.length - 1]);\n    }\n\n    const init = await fetch(url, {method: \"get\"});\n    const blob = await init.blob();\n    compressedFile(blob, mainRef.name, thumbRef.name, docId);\n  }\n\n  async function compressedFile(blob, originFileName, thumbFileName, docId) {\n    console.log(`originalFile size ${blob.size / 1024 / 1024} MB`);\n    console.log('원본 파일 이름: ', originFileName);\n\n    const options = {\n      maxSizeMB: 1,\n      maxWidthOrHeight: 1000,\n      useWebWorker: true,\n      initialQuality: 0.7\n    }\n    try {\n      const compressedFile = await imageCompression(blob, options);\n      console.log(`compressedFile size ${compressedFile.size / 1024 / 1024} MB`);\n\n      let thumbnailFile = await getThumbnailFile(compressedFile);\n      console.log('썸네일 파일: ', thumbnailFile);\n\n      let res = await Promise.all([\n        ref.child(`${doc}/${originFileName}`).delete()\n        .then(() => {\n          console.log(originFileName + ' 1차 삭제 완료');\n        })\n        .catch((error) => {\n          console.log('1차 삭제 실패: ', error);\n          ref.child(`${oldDoc}/${originFileName}`).delete().then(() => {\n            console.log(originFileName + ' 2차 삭제 완료');\n          }).catch((error) => {\n            console.log('2차 삭제 실패: ', error);;\n          });\n        }),\n\n        ref.child(`thumbnails/${thumbFileName}`).delete()\n        .then(() => {\n          console.log(thumbFileName + ' 썸네일 삭제 완료');\n        })\n        .catch((error) => {\n          console.log('썸네일 삭제 실패: ', error);\n        }),\n\n        ref.child(`${doc}/${uuidv4()}${ext ? '.'+ext : '.jpg'}`).put(compressedFile)\n        .then((snapshot) => {\n          return snapshot.ref.getDownloadURL();\n        }).catch((error) => {\n          console.log('재업로드 실패: ', error);\n        }),\n\n        ref.child(`thumbnails/${uuidv4()}.webp`).put(thumbnailFile)\n        .then((snapshot) => {\n          return snapshot.ref.getDownloadURL();\n        }).catch((error) => {\n          console.log('썸네일 재업로드 실패: ', error);\n        })\n      ]);\n\n      console.log(res);\n\n      updateAttachmentUrl(docId, res[2], res[3]);\n      \n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async function getThumbnailFile(blob) {\n    const reader = new FileReader();\n    return await new Promise((resolve) => {\n      reader.onloadend = (finishedEvent) => {\n        const {\n          currentTarget: { result },\n        } = finishedEvent;\n        const image = new Image();\n        image.src = result;\n        image.onload = function () {\n          const canvas = document.createElement(\"canvas\");\n          canvas.width = 300;\n          canvas.height = 300;\n          canvas.getContext(\"2d\").drawImage(image, 0, 0, 300, 300);\n          canvas.toBlob((blob) => {\n            resolve(blob);\n          }, 'image/webp', 0.7);\n        }\n      }\n      reader.readAsDataURL(blob);  \n    })\n    \n  }\n\n  async function updateAttachmentUrl(docId, url, thumbnailUrl) {\n    dbService.doc(`items/${docId}`).update({\n      attachmentUrl: url,\n      thumbnailUrl: thumbnailUrl,\n    });\n    console.log('======== 업데이트 완료. 변경 파일 URL: ', url, thumbnailUrl);\n  } \n\n  // 기존 데이터에 썸네일 이미지 없는 경우 썸네일 이미지 만들어 추가하기\n  const handleCreateThumbnail = async () => {\n    console.log('========= 썸네일 이미지 추가하기 시작');\n    let items = await getItems();\n    console.log('전체 아이템: ',items)\n\n    items.forEach(async (item) => {\n      console.log('업데이트 호출 시작: ', item);\n      if (!item.thumbnailUrl) {\n        updateThumbnail(item.id, item.url);\n      }\n    });\n  }\n\n  async function updateThumbnail(docId, url) {\n    let mainRef = await storageService.refFromURL(url);\n    const init = await fetch(url, {method: \"get\"});\n    const blob = await init.blob();\n    createThumbnail(blob, mainRef.name, docId);\n  }\n\n  async function createThumbnail(blob, originFileName, docId) {\n    console.log('원본 파일 이름: ', originFileName);\n\n    try {\n      let thumbnailFile = await getThumbnailFile(blob);\n      console.log('썸네일 파일: ', thumbnailFile);\n\n      let res = await new Promise((resolve) => {\n        ref.child(`thumbnails/${uuidv4()}.webp`).put(thumbnailFile)\n        .then((snapshot) => {\n          resolve(snapshot.ref.getDownloadURL());\n        }).catch((error) => {\n          console.log('썸네일 재업로드 실패: ', error);\n        })\n      });\n\n      updateThumbnailUrl(docId, res);\n      \n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async function updateThumbnailUrl(docId, thumbnailUrl) {\n    dbService.doc(`items/${docId}`).update({\n      thumbnailUrl: thumbnailUrl,\n    });\n    console.log('======== 업데이트 완료. 변경 파일 URL: ', thumbnailUrl);\n  } \n\n  // 썸네일 이미지 만들기\n  const handleImageConverter = () => {\n    console.log('========= 썸네일 이미지 만들기 시작');\n    const file = document.getElementById(\"origin-image\").files[0];\n    resizeImage(file);\n  }\n\n  function resizeImage(file) {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = function (event) {\n      const image = new Image();\n      image.width = width;\n      image.height = height;\n      image.title = 'thumbnail';\n      image.src = reader.result;\n\n      image.onload = function () {\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = width;\n        canvas.height = height;\n        canvas.getContext(\"2d\").drawImage(image, 0, 0, width, height);\n        const dataUri = canvas.toDataURL(\"image/webp\", 0.7);\n        const thumb = new Image();\n        thumb.src=dataUri;\n        document.getElementById('thumbnail').appendChild(thumb);\n      }\n    }\n  }\n\n  const changeStartDate = (event) => {\n    setStartDate(event.target.value);\n  }\n\n  const changeEndDate = (event) => {\n    setEndDate(event.target.value);\n  }\n\n  const changeWidht = (event) => {\n    setWidth(event.target.value);\n  }\n\n  const changeHeight = (event) => {\n    setHeight(event.target.value);\n  }\n\n  return (\n    <section className=\"wrapContainer dark\">\n      <div className=\"container\"  style={{color:\"white\"}}>\n        <div style={{display:'flex', alignItems:'center', gap:20}}>\n          <div style={{margin:10}}>\n            시작일 <input type=\"date\" onChange={changeStartDate} style={{padding:10, margin:10}} />\n          </div>\n          <p>~</p>\n          <div>\n            종료일 <input type=\"date\" onChange={changeEndDate} style={{padding:10, margin:10}} />\n          </div>\n        </div>\n        <div style={{display:\"flex\", gap:30, justifyContent:'center', alignItems:'flex-start', textAlign:'center'}}>\n          <div style={{display:\"flex\", flexDirection:\"column\", gap:50}}>\n            <div>\n              <h2 style={{marginBottom:0}}>기간별 이미지 압축하기</h2>\n              <input type=\"button\" className=\"factoryInput__arrow\" onClick={handleImageCompression} value=\"Start\" />\n            </div>\n            <div>\n              <h2 style={{marginBottom:0}}>기간별 썸네일만 추가하기</h2>\n              <input type=\"button\" className=\"factoryInput__arrow\" onClick={handleCreateThumbnail} value=\"Start\" />\n            </div>\n            <div>\n              <h2 style={{marginBottom:0}}>기간별 이미지 다운로드</h2>\n              <input type=\"button\" className=\"factoryInput__arrow\" onClick={handleImageDownload} value=\"Download\" />\n            </div>\n          </div>\n          <div style={{display:'flex', flexDirection:'column', alignItems:'center', gap:10}}>\n            <h2>썸네일 이미지 만들기</h2>\n            <div>\n              width <input type=\"number\" onChange={changeWidht} style={{width:100, padding:10, borderRadius:5, marginRight:10}} />\n              height <input type=\"number\" onChange={changeHeight} style={{width:100, padding:10, borderRadius:5}} />\n            </div>\n            <input type=\"file\" id=\"origin-image\" style={{width:290, color:'#333', backgroundColor:'white', padding:10, borderRadius:5}} />\n            <input type=\"button\" className=\"factoryInput__arrow\" onClick={handleImageConverter} value=\"Create\" />\n            <div id=\"thumbnail\"></div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default ImageCompressior;"],"names":["useState","ext","setExt","startDate","setStartDate","endDate","setEndDate","width","setWidth","height","setHeight","doc","oldDoc","ref","storageService","url","date","a","console","log","fetch","method","init","blob","fileName","URL","createdUrl","createObjectURL","document","createElement","href","download","body","appendChild","click","window","revokeObjectURL","getItems","count","items","Promise","resolve","dbService","where","process","orderBy","get","then","snapshot","docs","forEach","push","num","id","data","attachmentUrl","thumbnailUrl","catch","error","handleImageCompression","item","updateImage","docId","mainRef","thumbRef","undefined","name","indexOf","split","length","compressedFile","originFileName","thumbFileName","size","options","maxSizeMB","maxWidthOrHeight","useWebWorker","initialQuality","imageCompression","getThumbnailFile","thumbnailFile","all","child","delete","uuidv4","put","getDownloadURL","res","updateAttachmentUrl","reader","FileReader","onloadend","finishedEvent","result","currentTarget","image","Image","src","onload","canvas","getContext","drawImage","toBlob","readAsDataURL","update","handleCreateThumbnail","updateThumbnail","createThumbnail","updateThumbnailUrl","className","style","color","display","alignItems","gap","margin","type","onChange","event","target","value","padding","justifyContent","textAlign","flexDirection","marginBottom","onClick","borderRadius","marginRight","backgroundColor","file","title","dataUri","toDataURL","thumb","getElementById","resizeImage","files"],"sourceRoot":""}
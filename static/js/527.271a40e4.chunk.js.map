{"version":3,"file":"static/js/527.271a40e4.chunk.js","mappings":"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","sources":["components/ToastEditor.js","components/NewsFactory.js","components/NewsFactoryEdit.js","routes/NewsWrite.js"],"sourcesContent":["import { Editor } from \"@toast-ui/react-editor\";\r\nimport \"@toast-ui/editor/dist/i18n/ko-kr\";\r\nimport \"@toast-ui/editor/dist/toastui-editor.css\";\r\nimport colorSyntax from \"@toast-ui/editor-plugin-color-syntax\";\r\nimport \"tui-color-picker/dist/tui-color-picker.css\";\r\nimport \"@toast-ui/editor-plugin-color-syntax/dist/toastui-editor-plugin-color-syntax.css\";\r\nimport { useEffect } from \"react\";\r\n\r\nexport function EditorBox({ editorRef, onChange, text }) {\r\n  useEffect(() => {\r\n    editorRef.current?.getInstance().setHTML(text);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"edit_wrap\">\r\n      <Editor\r\n        ref={editorRef}\r\n        placeholder=\"간략하게 요약해 주세요\"\r\n        previewStyle=\"vertical\"\r\n        height=\"600px\"\r\n        initialEditType=\"wysiwyg\"\r\n        useCommandShortcut={true}\r\n        usageStatistics={false}\r\n        hideModeSwitch={true}\r\n        plugins={[colorSyntax]}\r\n        language=\"ko-KR\"\r\n        onChange={onChange}\r\n        toolbarItems={[\r\n          [\"heading\", \"bold\", \"italic\"],\r\n          [\"hr\", \"quote\"],\r\n          // [\"ul\", \"ol\", \"task\", \"indent\", \"outdent\"],\r\n          [\"table\", \"image\", \"link\"],\r\n          // [\"code\", \"codeblock\"],\r\n        ]}\r\n        // 유튜브 삽입 및 미리보기 를 위한 설정(iframe)\r\n        customHTMLRenderer={{\r\n          htmlBlock: {\r\n            iframe(node) {\r\n              return [\r\n                {\r\n                  type: \"openTag\",\r\n                  tagName: \"iframe\",\r\n                  outerNewLine: true,\r\n                  attributes: node.attrs,\r\n                },\r\n                { type: \"html\", content: node.childrenHTML },\r\n                { type: \"closeTag\", tagName: \"iframe\", outerNewLine: true },\r\n              ];\r\n            },\r\n          },\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import { dbService } from \"fbase\";\r\nimport { useState, useRef } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { EditorBox } from \"./ToastEditor\";\r\n\r\nconst NewsFactory = ({ userObj }) => {\r\n  const navigate = useNavigate();\r\n  const [title, setTitle] = useState(\"\");\r\n  const [type, setType] = useState(\"News\");\r\n  const [text, setText] = useState(\"\");\r\n  const [url, setUrl] = useState(\"\");\r\n\r\n  let today = new Date();\r\n  const offset = today.getTimezoneOffset();\r\n  today = new Date(today.getTime() - offset * 60 * 1000);\r\n\r\n  const onTitleChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setTitle(value);\r\n  };\r\n  const onTypeChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setType(value);\r\n  };\r\n  const onUrlChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setUrl(value);\r\n  };\r\n\r\n  const editorRef = useRef();\r\n  const onContentChange = () => {\r\n    setText(editorRef.current?.getInstance().getHTML());\r\n  };\r\n\r\n  const onSubmit = async (event) => {\r\n    if (type === \"\") return alert(\"카테고리를 입력해 주세요\");\r\n    if (title === \"\") return alert(\"제목을 입력해 주세요\");\r\n    if (url === \"\") return alert(\"토픽 출처 URL 주소를 입력해 주세요\");\r\n    if (text === \"\") return alert(\"토픽을 간단하게 요약해 주세요\");\r\n\r\n    event.preventDefault();\r\n    const newsObj = {\r\n      title: title,\r\n      type: type,\r\n      url: url,\r\n      text: text,\r\n      createdAt: today.toISOString(),\r\n      updatedAt: today.toISOString(),\r\n      creatorId: userObj.uid,\r\n      creatorEmail: userObj.email,\r\n    };\r\n    const docRef = await dbService.collection(\"news\").add(newsObj);\r\n    alert(\"등록 완료!\");\r\n    navigate(`/news/${docRef.id}`);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={onSubmit} className=\"factoryForm\">\r\n      <div className=\"factoryInput__container\">\r\n        <div className=\"newsFactoryInput__radio\">\r\n          <label htmlFor=\"News\">\r\n            <input\r\n              value=\"News\"\r\n              id=\"News\"\r\n              name=\"type\"\r\n              type=\"radio\"\r\n              defaultChecked\r\n              onChange={onTypeChange}\r\n            />\r\n            뉴스\r\n          </label>\r\n          <label htmlFor=\"Bookmark\">\r\n            <input\r\n              value=\"Bookmark\"\r\n              id=\"Bookmark\"\r\n              name=\"type\"\r\n              type=\"radio\"\r\n              onChange={onTypeChange}\r\n            />\r\n            북마크\r\n          </label>\r\n          <label htmlFor=\"Newsletter\">\r\n            <input\r\n              value=\"Newsletter\"\r\n              id=\"Newsletter\"\r\n              name=\"type\"\r\n              type=\"radio\"\r\n              onChange={onTypeChange}\r\n            />\r\n            뉴스레터\r\n          </label>\r\n          <label htmlFor=\"Etc\">\r\n            <input\r\n              value=\"Etc\"\r\n              id=\"Etc\"\r\n              name=\"type\"\r\n              type=\"radio\"\r\n              onChange={onTypeChange}\r\n            />\r\n            기타\r\n          </label>\r\n        </div>\r\n        <div className=\"newsFactoryInput__title\">\r\n          <span>제목</span>\r\n          <input\r\n            className=\"factoryInput__Input\"\r\n            value={title}\r\n            onChange={onTitleChange}\r\n            type=\"text\"\r\n          />\r\n        </div>\r\n        <div className=\"newsFactoryInput__title\">\r\n          <span>출처</span>\r\n          <input\r\n            className=\"factoryInput__Input\"\r\n            value={url}\r\n            onChange={onUrlChange}\r\n            placeholder=\"출처 링크를 입력해 주세요\"\r\n            type=\"url\"\r\n          />\r\n        </div>\r\n        <EditorBox editorRef={editorRef} onChange={onContentChange} />\r\n        <label htmlFor=\"news-submit\" className=\"factoryInput__arrow\">\r\n          등록\r\n        </label>\r\n        <input\r\n          id=\"news-submit\"\r\n          type=\"submit\"\r\n          value=\"&rarr;\"\r\n          className=\"factoryInput__arrow\"\r\n          style={{ opacity: 0 }}\r\n        />\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default NewsFactory;\r\n","import { dbService } from \"fbase\";\r\nimport { useEffect, useState, useRef } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { EditorBox } from \"./ToastEditor\";\r\n\r\nconst NewsFactoryEdit = ({ userObj, itemId }) => {\r\n  const navigate = useNavigate();\r\n  const [title, setTitle] = useState(\"\");\r\n  const [type, setType] = useState(\"\");\r\n  const [text, setText] = useState(\"\");\r\n  const [url, setUrl] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    dbService\r\n      .doc(`news/${itemId}`)\r\n      .get()\r\n      .then((doc) => {\r\n        const data = doc.data();\r\n        setTitle(data.title);\r\n        setType(data.type);\r\n        setText(data.text);\r\n        setUrl(data.url);\r\n      });\r\n  }, []);\r\n\r\n  const onTitleChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setTitle(value);\r\n  };\r\n  const onTypeChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setType(value);\r\n  };\r\n  const onUrlChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setUrl(value);\r\n  };\r\n\r\n  const editorRef = useRef();\r\n  const onContentChange = () => {\r\n    setText(editorRef.current?.getInstance().getHTML());\r\n  };\r\n\r\n  const onSubmit = async (event) => {\r\n    let today = new Date();\r\n    const offset = today.getTimezoneOffset();\r\n    today = new Date(today.getTime() - offset * 60 * 1000);\r\n\r\n    if (title === \"\") return alert(\"제목을 입력해 주세요\");\r\n    if (url === \"\") return alert(\"토픽 출처 URL 주소를 입력해 주세요\");\r\n    if (text === \"\") return alert(\"토픽을 간단하게 요약해 주세요\");\r\n\r\n    event.preventDefault();\r\n    const newItemObj = {\r\n      title: title,\r\n      type: type,\r\n      url: url,\r\n      text: text,\r\n      updatedAt: today.toISOString(),\r\n      creatorEmail: userObj.email,\r\n    };\r\n\r\n    await dbService.doc(`news/${itemId}`).update(newItemObj);\r\n    alert(\"수정 완료!\");\r\n    navigate(`/news/${itemId}`);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={onSubmit} className=\"factoryForm\">\r\n      <div className=\"factoryInput__container\">\r\n        <div className=\"newsFactoryInput__radio\">\r\n          <label htmlFor=\"News\">\r\n            <input\r\n              value=\"News\"\r\n              id=\"News\"\r\n              name=\"type\"\r\n              type=\"radio\"\r\n              onChange={onTypeChange}\r\n              checked={type === \"News\" ? true : false}\r\n            />\r\n            뉴스\r\n          </label>\r\n          <label htmlFor=\"Bookmark\">\r\n            <input\r\n              value=\"Bookmark\"\r\n              id=\"Bookmark\"\r\n              name=\"type\"\r\n              type=\"radio\"\r\n              onChange={onTypeChange}\r\n              checked={type === \"Bookmark\" ? true : false}\r\n            />\r\n            북마크\r\n          </label>\r\n          <label htmlFor=\"Newsletter\">\r\n            <input\r\n              value=\"Newsletter\"\r\n              id=\"Newsletter\"\r\n              name=\"type\"\r\n              type=\"radio\"\r\n              onChange={onTypeChange}\r\n              checked={type === \"Newsletter\" ? true : false}\r\n            />\r\n            뉴스레터\r\n          </label>\r\n          <label htmlFor=\"Etc\">\r\n            <input\r\n              value=\"Etc\"\r\n              id=\"Etc\"\r\n              name=\"type\"\r\n              type=\"radio\"\r\n              onChange={onTypeChange}\r\n              checked={type === \"Etc\" ? true : false}\r\n            />\r\n            기타\r\n          </label>\r\n        </div>\r\n        <div className=\"newsFactoryInput__title\">\r\n          <span>제목</span>\r\n          <input\r\n            className=\"factoryInput__Input\"\r\n            value={title}\r\n            onChange={onTitleChange}\r\n            type=\"text\"\r\n          />\r\n        </div>\r\n        <div className=\"newsFactoryInput__title\">\r\n          <span>출처</span>\r\n          <input\r\n            className=\"factoryInput__Input\"\r\n            value={url}\r\n            placeholder=\"출처 링크를 입력해 주세요\"\r\n            onChange={onUrlChange}\r\n            type=\"url\"\r\n          />\r\n        </div>\r\n        {text && (\r\n          <EditorBox\r\n            editorRef={editorRef}\r\n            onChange={onContentChange}\r\n            text={text}\r\n          />\r\n        )}\r\n        <label htmlFor=\"news-submit\" className=\"factoryInput__arrow\">\r\n          수정\r\n        </label>\r\n        <input\r\n          id=\"news-submit\"\r\n          type=\"submit\"\r\n          value=\"&rarr;\"\r\n          className=\"factoryInput__arrow\"\r\n          style={{ opacity: 0 }}\r\n        />\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default NewsFactoryEdit;\r\n","import NewsFactory from \"components/NewsFactory\";\r\nimport NewsFactoryEdit from \"components/NewsFactoryEdit\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nconst NewsWrite = ({ userObj }) => {\r\n  let { id } = useParams();\r\n\r\n  return (\r\n    <section className=\"wrapContainer dark\">\r\n      <div className=\"container\">\r\n        {id ? (\r\n          <>\r\n            <h2>토픽 수정하기</h2>\r\n            <NewsFactoryEdit userObj={userObj} itemId={id} />\r\n          </>\r\n        ) : (\r\n          <>\r\n            <h2>토픽 등록하기</h2>\r\n            <NewsFactory userObj={userObj} />\r\n          </>\r\n        )}\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default NewsWrite;\r\n"],"names":["EditorBox","editorRef","onChange","text","useEffect","current","getInstance","setHTML","className","ref","placeholder","previewStyle","height","initialEditType","useCommandShortcut","usageStatistics","hideModeSwitch","plugins","colorSyntax","language","toolbarItems","customHTMLRenderer","htmlBlock","iframe","node","type","tagName","outerNewLine","attributes","attrs","content","childrenHTML","userObj","navigate","useNavigate","useState","title","setTitle","setType","setText","url","setUrl","today","Date","offset","getTimezoneOffset","getTime","onTypeChange","event","value","target","useRef","onSubmit","alert","preventDefault","newsObj","createdAt","toISOString","updatedAt","creatorId","uid","creatorEmail","email","dbService","add","docRef","id","htmlFor","name","defaultChecked","getHTML","style","opacity","itemId","get","then","doc","data","newItemObj","update","checked","useParams"],"sourceRoot":""}